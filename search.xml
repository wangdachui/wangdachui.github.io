<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>newpost</title>
      <link href="/2018/07/23/newpost/"/>
      <url>/2018/07/23/newpost/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>斐讯运动代码规范</title>
      <link href="/2018/07/23/%E6%96%90%E8%AE%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2018/07/23/%E6%96%90%E8%AE%AF%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<p>###目录</p><ul><li>Language</li><li>Code Organization</li><li>Spacing</li><li>Comments</li><li>Naming<ul><li>Underscores</li></ul></li><li>Methods</li><li>Variables</li><li>Property Attributes</li><li>Dot-Notation Syntax</li><li>Literals</li><li>Constants</li><li>Case Statements</li><li>Private Properties</li><li>Booleans</li><li>Conditionals<ul><li>Ternary Operator</li></ul></li><li>Init Methods</li><li>CGRect Functions</li><li>Golden Path</li><li>Error handling</li><li>Line Breaks<br>Language</li></ul><hr><p>###Language</p><p>使用正确英文拼写</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIColor *myColor = [UIColor whiteColor];</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIColor *myColur = [UIColor whiteColor];</span><br></pre></td></tr></table></figure><hr><p>###Code Organization</p><p>使用#pragma标记 - 对功能分组和方法进行分类。#pragma mark上面加空行，下面不加空行。mark后面不需要加：，-前后都加空格。格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#pragma mark - Lifecycle</span><br><span class="line">- (instancetype)init &#123;&#125;</span><br><span class="line">- (void)dealloc &#123;&#125;</span><br><span class="line">- (void)viewDidLoad &#123;&#125;</span><br><span class="line">- (void)viewWillAppear:(BOOL)animated &#123;&#125;</span><br><span class="line">- (void)didReceiveMemoryWarning &#123;&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Setters &amp; Getters</span><br><span class="line">- (void)setCustomProperty:(id)value &#123;&#125;</span><br><span class="line">- (id)customProperty &#123;&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - IBActions</span><br><span class="line">- (IBAction)submitData:(id)sender &#123;&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Public</span><br><span class="line">- (void)publicMethod &#123;&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - Protocol conformance</span><br><span class="line">#pragma mark - UITextFieldDelegate</span><br><span class="line">#pragma mark - UITableViewDataSource</span><br><span class="line">#pragma mark - UITableViewDelegate</span><br><span class="line"></span><br><span class="line">#pragma mark - NSCopying</span><br><span class="line">- (id)copyWithZone:(NSZone *)zone &#123;&#125;</span><br><span class="line"></span><br><span class="line">#pragma mark - NSObject</span><br><span class="line">- (NSString *)description &#123;&#125;</span><br></pre></td></tr></table></figure><hr><p>###Spacing</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (user.isHappy) &#123;</span><br><span class="line">  //Do something</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  //Do something else</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if (user.isHappy)</span><br><span class="line">&#123;</span><br><span class="line">    //Do something</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    //Do something else</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>每两个方法之间应该空一行。</li><li>尽量使用auto-synthesis。但是，如果有必要，@synthesize和@dynamic应该在实现中的新行中声明。</li><li>方法具有&gt; = 3个冒号，冒号对齐使代码更具可读性。请不要使用包含块的冒号对齐方法，因为Xcode的缩进使得它难以辨认。</li></ul><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// blocks are easily readable</span><br><span class="line">[UIView animateWithDuration:1.0 animations:^&#123;</span><br><span class="line">  // something</span><br><span class="line">&#125; completion:^(BOOL finished) &#123;</span><br><span class="line">  // something</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// colon-aligning makes the block indentation hard to read</span><br><span class="line">[UIView animateWithDuration:1.0</span><br><span class="line">                 animations:^&#123;</span><br><span class="line">                     // something</span><br><span class="line">                 &#125;</span><br><span class="line">                 completion:^(BOOL finished) &#123;</span><br><span class="line">                     // something</span><br><span class="line">                 &#125;];</span><br></pre></td></tr></table></figure><hr><p>###Comments</p><p>使用注释来解释为什么某个特定的代码会执行某些操作。注释必须保持最新或删除无用的注释。<br>一般应避免评论，因为代码应尽可能自行记录，只需要间歇的，少数几行的解释。</p><p>1 public方法必须写标准注释</p><p>2 复杂宏要写注释</p><p>3 注释用中文</p><hr><p>###Naming</p><p>应尽可能遵守Apple命名约定，特别是与内存管理规则（NARC）有关的命名约定。<br>长，描述性的方法和变量名称是很好的。变量命名以类型结尾 ，且要全拼。特殊情况可缩写</p><h4 id="属性命名"><a href="#属性命名" class="headerlink" title="属性命名"></a>属性命名</h4><p>1 一般属性命名</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">UIButton *settingsButton;</span><br><span class="line"></span><br><span class="line">UIlabel *nickLabel</span><br><span class="line"></span><br><span class="line">UIIamgeView *headerImageView</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UIButton *setBut</span><br><span class="line"></span><br><span class="line">UIlabel *nick</span><br></pre></td></tr></table></figure><p>2 当属性命名太长时可使用缩写，例如 </p><pre><code>a. personalCenterHeadBackgroundView 缩写为 personalCenterHeadBgv   b. personalCenterHeadViewTopConstraints 缩写为 personalCenterHeadViewTopCons</code></pre><p>3 属性应该是驼峰式的，首字母小写。 除非您有充分的理由，否则请使用自动合成属性，而不要使用手动@synthesize语句。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, strong) NSString *descriptiveVariableName;</span><br></pre></td></tr></table></figure><p>4 当使用属性时，实例变量应该总是使用self来读写。</p><p>例外：在初始化器内部，应该直接使用实例变量（即_variableName）来避免getters / setter的任何潜在副作用。</p><h4 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h4><p>为了清楚起见，常量应该使用驼峰写法，并加上相关类名的前缀。尽量使用全局静态常量代替宏，因为宏有增加编译时间，纯文本替换没有类型检查等缺点</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static NSTimeInterval const PHITutorialViewControllerNavigationFadeAnimationDuration = 0.3;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static NSTimeInterval const fadetime = 1.7;</span><br></pre></td></tr></table></figure><h4 id="局部变量命名"><a href="#局部变量命名" class="headerlink" title="局部变量命名"></a>局部变量命名</h4><p>局部变量不应包含下划线。</p><h4 id="文件命名"><a href="#文件命名" class="headerlink" title="文件命名"></a>文件命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIViewController： PHI + 模块名 + XXX（业务）+ VC</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">model</span><br><span class="line"></span><br><span class="line">dataModel： PHI + 模块名 + XXX + Model</span><br><span class="line"></span><br><span class="line">viewModel： PHI + 模块名 + XXX + VM</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据库表： PHI + XXX + Table</span><br></pre></td></tr></table></figure><hr><p>###Methods</p><p>1 在方法中，方法类型后面应该有一个空格（ - / +符号）。 方法段之间应该有一个空格（匹配Apple的样式）。并在描述参数的参数前面加上描述性词语。<br>单词“and”的用法是保留的。 它不应该用于多个参数，如下面的initWithWidth：height：示例所示。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)setExampleText:(NSString *)text image:(UIImage *)image;</span><br><span class="line">- (void)sendAction:(SEL)aSelector to:(id)anObject forAllCells:(BOOL)flag;</span><br><span class="line">- (id)viewWithTag:(NSInteger)tag;</span><br><span class="line">- (instancetype)initWithWidth:(CGFloat)width height:(CGFloat)height;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-(void)setT:(NSString *)text i:(UIImage *)image;</span><br><span class="line">- (void)sendAction:(SEL)aSelector :(id)anObject :(BOOL)flag;</span><br><span class="line">- (id)taggedView:(NSInteger)tag;</span><br><span class="line">- (instancetype)initWithWidth:(CGFloat)width andHeight:(CGFloat)height;</span><br><span class="line">- (instancetype)initWith:(int)width and:(int)height;  // Never do this.</span><br></pre></td></tr></table></figure><p>2 协议方法、public方法参数需要按业务申明nullable,nonnull，明确参数是否可为空.</p><p>如果需要每个属性或每个方法都去指定 nonnull 和 nullable ，将是一件非常繁琐的事。苹果为了减轻我们的工作量，专门提供了两个宏： NS_ASSUME_NONNULL_BEGIN 和 NS_ASSUME_NONNULL_END 。在这两个宏之间的代码，所有简单指针对象都被假定为 nonnull ，因此我们只需要去指定那些 nullable 指针对象即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NS_ASSUME_NONNULL_BEGIN </span><br><span class="line"></span><br><span class="line">- (void)willMoveToSuperview:(nullable UIView *)newSuperview;</span><br><span class="line">- (void)willMoveToWindow:(nullable UIWindow *)newWindow;</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure><p>3 点语法纯粹是访问方法调用的一个方便包装。 当您使用点语法时，该属性仍然使用getter和setter方法访问或更改。<br>点符号应该总是用于访问和改变属性，因为它使代码更加简洁。 在所有其他情况下，[ ]符号是首选。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSInteger arrayCount = [self.array count];</span><br><span class="line">view.backgroundColor = [UIColor orangeColor];</span><br><span class="line">[UIApplication sharedApplication].delegate;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSInteger arrayCount = self.array.count;</span><br><span class="line">[view setBackgroundColor:[UIColor orangeColor]];</span><br><span class="line">UIApplication.sharedApplication.delegate;</span><br><span class="line">Literals</span><br></pre></td></tr></table></figure><hr><p>###Variables</p><p>1 变量应尽可能描述性地命名。 除了for（）循环外，应避免使用单个字母的变量名称。<br>指示指针的星号属于变量，例如，</p><pre><code>NSString *text 不是NSString* text 或 NSString * text</code></pre><p>除了常量的情况,尽可能使用属性来代替实例变量。 虽然使用实例变量是一种行之有效的方式。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface RWTTutorial : NSObject</span><br><span class="line"></span><br><span class="line">@property (nonatomic, strong) NSString *tutorialName;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@interface RWTTutorial : NSObject &#123;</span><br><span class="line">  NSString *tutorialName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2 每当创建这些对象的不可变实例时，都应该使用NSString，NSDictionary，NSArray和NSNumber的字面量语法。 特别注意nil值不能传递到NSArray和NSDictionary文字中，因为这会导致崩溃。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *nameArray = @[@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul”];</span><br><span class="line">NSDictionary *productManagerDict = @&#123;@&quot;iPhone&quot;: @&quot;Kate&quot;, @&quot;iPad&quot;: @&quot;Kamal&quot;, @&quot;Mobile Web&quot;: @&quot;Bill&quot;&#125;;</span><br><span class="line">NSNumber *shouldUseLiterals = @YES;</span><br><span class="line">NSNumber *buildingStreetNumber = @10018;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSArray *names = [NSArray arrayWithObjects:@&quot;Brian&quot;, @&quot;Matt&quot;, @&quot;Chris&quot;, @&quot;Alex&quot;, @&quot;Steve&quot;, @&quot;Paul&quot;, nil];</span><br><span class="line">NSDictionary *productManagers = [NSDictionary dictionaryWithObjectsAndKeys: @&quot;Kate&quot;, @&quot;iPhone&quot;, @&quot;Kamal&quot;, @&quot;iPad&quot;, @&quot;Bill&quot;, @&quot;Mobile Web&quot;, nil];</span><br><span class="line">NSNumber *shouldUseLiterals = [NSNumber numberWithBool:YES];</span><br><span class="line">NSNumber *buildingStreetNumber = [NSNumber numberWithInteger:10018];</span><br></pre></td></tr></table></figure><hr><p>###Property Attributes</p><p>Property修饰关键字应该明确列出，并在阅读代码时帮助新程序员。nonatomic在前。xib拖出来的不需要调整</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, weak) IBOutlet UIView *containerView;</span><br><span class="line">@property (nonatomic, strong) NSString *tutorialName;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic) NSString *tutorialName;</span><br></pre></td></tr></table></figure><p>具有可变对象的属性（例如NSString）应该更喜欢copy而不是strong。 为什么？ 即使你声明一个属性为NSString，有人可能会传入一个NSMutableString的实例，然后在没有注意的情况下更改它。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (nonatomic, copy) NSString *tutorialName;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@property (strong, nonatomic) NSString *tutorialName;</span><br></pre></td></tr></table></figure><hr><p>###Booleans</p><p>Objective-C使用YES和NO。 因此，true和false应该只用于CoreFoundation，C或C ++代码。 由于无解析为NO，所以不需要在条件下进行比较。 切勿将某些东西直接与YES进行比较，因为YES被定义为1，而BOOL可以高达8位。<br>这可以保证文件间的一致性和更高的视觉清晰度。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (someObject) &#123;&#125;</span><br><span class="line">if (![anotherObject boolValue]) &#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (someObject == nil) &#123;&#125;</span><br><span class="line">if ([anotherObject boolValue] == NO) &#123;&#125;</span><br><span class="line">if (isAwesome == YES) &#123;&#125; // Never do this.</span><br><span class="line">if (isAwesome == true) &#123;&#125; // Never do this.</span><br></pre></td></tr></table></figure><hr><p>###Conditionals</p><p>即使if可以不带大括号（例如，只有一行，if也应始终使用大括号。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!error) &#123;</span><br><span class="line">  return success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (!error)</span><br><span class="line">  return success;</span><br><span class="line">or</span><br><span class="line">if (!error) return success;</span><br></pre></td></tr></table></figure><hr><p>###Ternary Operator</p><p>三元运算符的最佳用途是分配一个变量并决定使用哪个值。</p><p>非布尔变量应与某些内容进行比较，并添加括号以提高可读性。 如果被比较的变量是布尔类型，则不需要括号。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSInteger value = 5;</span><br><span class="line">result = (value != 0) ? x : y;</span><br><span class="line"></span><br><span class="line">BOOL isHorizontal = YES;</span><br><span class="line">result = isHorizontal ? x : y;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = a &gt; b ? x = c &gt; d ? c : d : y;</span><br></pre></td></tr></table></figure><hr><p>###Init Methods</p><p>Init方法应遵循Apple生成的代码模板提供的约定。 还应该使用返回类型’instancetype’而不是’id’。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)init &#123;</span><br><span class="line">  self = [super init];</span><br><span class="line">  if (self) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;</span><br><span class="line">  return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>###Golden Path</p><p>不要嵌套if语句，多个返回语句就可以。异常后面的代码无需去执行，这就叫黄金路径。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (void)someMethod &#123;</span><br><span class="line">      if (![someOther boolValue]) &#123;</span><br><span class="line">         return;</span><br><span class="line">      &#125;</span><br><span class="line">      //Do something important</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)someMethod &#123;</span><br><span class="line">      if ([someOther boolValue]) &#123;</span><br><span class="line">          //Do something important</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>###Error handling</p><p>当方法通过引用返回一个错误参数时，打开返回的值，而不是错误变量。</p><p><strong>Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">if (![self trySomethingWithError:&amp;error]) &#123;</span><br><span class="line">  // Handle Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Not Preferred:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NSError *error;</span><br><span class="line">[self trySomethingWithError:&amp;error];</span><br><span class="line">if (error) &#123;</span><br><span class="line">  // Handle Error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>###Line Breaks</p><p>换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">For example:</span><br><span class="line"></span><br><span class="line">self.productsRequest = [[SKProductsRequest alloc] initWithProductIdentifiers:productIdentifiers];</span><br><span class="line"></span><br><span class="line">self.productsRequest = [[SKProductsRequest alloc] </span><br><span class="line">  initWithProductIdentifiers:productIdentifiers];</span><br></pre></td></tr></table></figure><hr><p>##补充：</p><h3 id="h"><a href="#h" class="headerlink" title=".h"></a>.h</h3><p>1 对外接口必须精简，只暴露必要属性及接口。尽量少的引入其他头文件，能用向前申明就用向前申明。在.h@class 在.m再#import</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@class FXSport_Template_Json;</span><br><span class="line"></span><br><span class="line">@interface FXTrainDetail : NSObject</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>2 引入库 用@import</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@import HealthKit;</span><br><span class="line">@interface FXHealthKitTool : NSObject</span><br><span class="line"></span><br><span class="line">- (HKAuthorizationStatus)authorizationStatus;</span><br><span class="line">- (void)saveBodyMeasurementsDataWithArray:(NSArray *)array;</span><br><span class="line">- (BOOL)isHealthDataAvailableWithHealthStore:(HKHealthStore *)healthStore;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="m"><a href="#m" class="headerlink" title=".m"></a>.m</h3><ol><li>使用block注意循环引用问题。统一使用@weakify @strongify解决,且用;结尾</li><li>实现的协议之间加空格，多了可以换行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@interface FXStepViewController ()&lt;</span><br><span class="line">UITableViewDelegate,</span><br><span class="line">UITableViewDataSource,</span><br><span class="line">FXStepCellDelegate,</span><br><span class="line">UINavigationControllerDelegate&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@interface FXStepViewController ()&lt;UITableViewDelegate, UITableViewDataSource&gt;</span><br></pre></td></tr></table></figure><p>3 集合类型加泛型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray&lt;NSString *&gt;</span><br><span class="line">NSDictionary&lt;NSString *,id&gt;</span><br><span class="line">NSSet&lt;NSString *&gt;</span><br></pre></td></tr></table></figure><h3 id="命名缩写-待商定"><a href="#命名缩写-待商定" class="headerlink" title="命名缩写 待商定"></a>命名缩写 待商定</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">button : btn</span><br><span class="line">label : lab</span><br><span class="line">image :  img</span><br><span class="line">imageView : imgView</span><br><span class="line">backgroundView : bgView</span><br><span class="line"></span><br><span class="line">string ：str</span><br><span class="line">number : num</span><br><span class="line">array : arr</span><br><span class="line">dictionary : dict</span><br><span class="line"></span><br><span class="line">constraints : cons</span><br><span class="line">viewController : VC</span><br><span class="line">viewModel : VM</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/10/28/hello-world/"/>
      <url>/2017/10/28/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
